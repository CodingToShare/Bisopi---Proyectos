@model ProjectTask

<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.10.1/polyfill.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>

<a type="button" class="btn p-1 btn-outline-secondary" href="/Project/Create">
    <img title="Nuevo" style="width:24px;cursor:pointer;" src="~/img/add.png" />
    Nuevo
</a>
<a type="button" class="btn p-1 btn-outline-secondary" href="/Project/Index">
    <img title="Listado" style="width:24px;cursor:pointer;" src="~/img/list.png" />
    Listado
</a>

<div class="p-3" style='font-size:14px'>
    <div class="h3">Tareas</div>
    <partial name="_ProjectInfo" model="Model.Project" />
    <div class="p-3">
        @(
            Html.DevExtreme().DataGrid<Bisopi___Proyectos.Models.ProjectTask>()
            .ID("gridContainer")
            .AllowColumnReordering(true)
            .RowAlternationEnabled(true)
            .AllowColumnResizing(true)
            .ShowRowLines(true)
            .ShowBorders(true)
            .WordWrapEnabled(true)
            .ColumnAutoWidth(true)
            .ColumnResizingMode(ColumnResizingMode.Widget)
            .SearchPanel(s => s
            .Visible(true)
            .HighlightCaseSensitive(true))
            .Grouping(grouping => grouping.AutoExpandAll(true))
            .GroupPanel(groupPanel => groupPanel.Visible(true))
            .FilterPanel(f => f.Visible(true))
            .HeaderFilter(h => h.Visible(true))
            .Selection(s => s.Mode(SelectionMode.Multiple))
            .Export(e => e.Enabled(true).AllowExportSelectedData(true))
            .OnExporting("exporting")
            .RemoteOperations(true)
            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                .DataSource(ds => ds.Mvc()
                .Controller("APIProjectTasks")
                .LoadAction("Get").LoadParams(new { projectID = Model.ProjectID})
                .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("TaskID")
            )
            .Columns(columns =>
            {
                columns.AddFor(m => m.TaskName);

                columns.AddFor(m => m.TaskGroupID).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("APIProjectTasks").LoadAction("TaskGroupLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                );

                columns.AddFor(m => m.Comment);

                columns.AddFor(m => m.TaskStatusID).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("APIProjectTasks").LoadAction("ProjectTaskStatusLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                );

                columns.AddFor(m => m.StartDate);

                columns.AddFor(m => m.EndDate);

                columns.AddFor(m => m.EstimateTime).CalculateCellValue(@<text>
                    function(data) {
                        var timeInSeconds = data['EstimateTime']
                        var hours = Math.floor(timeInSeconds / 3600);
                        var minutes = Math.floor((timeInSeconds % 3600) / 60);
                        var seconds = timeInSeconds % 60;
                        var formattedTime = "";
                        if (hours > 0) {
                        formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} horas`;
                        } else if (minutes > 0) {
                        formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} min`;
                        } else {
                        formattedTime = `${seconds.toString().padStart(2, '0')} seg`;
                        }
                        return formattedTime;
                    }
                </text>);
                columns.AddFor(m => m.ExecutionTimeHours).CalculateCellValue(@<text>
                    function(data) {
                    var timeInSeconds = data['EstimateTime']
                    var hours = Math.floor(timeInSeconds / 3600);
                    return hours;
                    }
                </text>).Visible(false);
                columns.AddFor(m => m.ExecutionTimeMinutes).CalculateCellValue(@<text>
                    function(data) {
                    var timeInSeconds = data['EstimateTime']
                    var minutes = Math.floor((timeInSeconds % 3600) / 60);
                    return minutes;
                    }
                </text>).Visible(false);
                columns.AddFor(m => m.ExecutionTime).CalculateCellValue(@<text>
                    function(data) {
                        var timeInSeconds = data['ExecutionTime']
                        var hours = Math.floor(timeInSeconds / 3600);
                        var minutes = Math.floor((timeInSeconds % 3600) / 60);
                        var seconds = timeInSeconds % 60;
                        var formattedTime = "";
                        if (hours > 0) {
                        formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} horas`;
                        } else if (minutes > 0) {
                        formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} min`;
                        } else {
                        formattedTime = `${seconds.toString().padStart(2, '0')} seg`;
                        }
                        return formattedTime;
                    }
                </text>);

                columns.AddFor(m => m.PositionID).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("APIProjectTasks").LoadAction("PositionsLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                );

                columns.AddFor(m => m.ResponsibleID).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("APIProjectTasks").LoadAction("ResponsibleLookup").Key("UserDataID"))
                .ValueExpr("UserDataID")
                .DisplayExpr("FirstNameAndLastNAme")
                );

                columns.AddFor(m => m.Created);
                columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(100)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit).Template(@<text>
                        <img src="/img/edit.png" style="width:20px;cursor:pointer;" title="Editar">
                    </text>);
                    b.Add().Name(GridColumnButtonName.Delete).Template(@<text>
                        <img src="/img/trash.png" style="width:20px;cursor:pointer;" title="Eliminar">
                    </text>);
                    b.Add().Name("History").Template(@<text>
                        <img src="/img/history_time.png" style="width:20px;cursor:pointer;" title='Historial' onclick="showHistorial('<%- data.TaskID%>')">
                    </text>);

                });
            })
            .Editing(e => e
                .AllowUpdating(true)
                .AllowDeleting(true)
                .Mode(GridEditMode.Popup)
                .Form(f => f.Items(items =>
                {
                    items.AddGroup().Items(i =>
                    {
                        i.AddSimpleFor(m => m.TaskName);
                        i.AddSimpleFor(m => m.TaskGroupID);
                        i.AddSimpleFor(m => m.PositionID);
                        i.AddSimpleFor(m => m.StartDate);
                        i.AddSimpleFor(m => m.EndDate);
                        i.AddSimpleFor(m => m.TaskStatusID);
                        i.AddSimpleFor(m => m.ResponsibleID);
                        i.AddSimpleFor(m => m.Comment);
                    }).ColCount(2);
                    items.AddGroup().Items(i =>
                    {
                        i.AddSimpleFor(m => m.ExecutionTimeHours);
                        i.AddSimpleFor(m => m.ExecutionTimeMinutes);
                    }).ColCount(2).Caption("Tiempo estimado");
                }
                )
                .ColCount(1)
                )
                )
            )
    </div>
    <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#ModalTarea" name="openTarea" id="openTarea">Agregar Tarea</button>
    <button id="cancel" name='cancel' type="submit" class="btn btn-dark">Cancelar</button>
</div>
<form asp-controller="Project" asp-action="Task" method="post">
    @Html.HiddenFor(x => x.ProjectID, new { @class = "ProjectID" }).
    @using (Html.DevExtreme().ValidationGroup())
    {
        <!-- Modal -->
        <div class="modal fade" id="ModalTarea" tabindex="-1" data-backdrop="static" data-keyboard="true" role="dialog" aria-labelledby="ModalTarea" aria-hidden="true">
            <div class="modal-dialog modal-lg" style='font-size:14px'>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="tareaModalLabel">Agregar Tarea</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="form-row">
                            <div class="form-group col-md-12">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.TaskName)</div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().TextBoxFor(x => x.TaskName).ID("proyecto_tarea"))
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-8">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.TaskGroupID)</div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().SelectBoxFor(x => x.TaskGroupID)
                                            .DisplayExpr("Text")
                                            .ValueExpr("Value")
                                            .DataSource(ds => ds.Mvc().Controller("APIProjectTasks").LoadAction("TaskGroupLookup").Key("Value"))
                                            .ID("grupo_tarea")

                                            )
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.PositionID)</div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().SelectBoxFor(x => x.PositionID)
                                            .DisplayExpr("Text")
                                            .ValueExpr("Value")
                                            .Placeholder("Seleccione")
                                            .DataSource(ds => ds.Mvc().Controller("APIProjectTasks").LoadAction("PositionsLookup").Key("Value"))
                                            .ID("cod_cargo")
                                            )
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.StartDate)</div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().DateBoxFor(x => x.StartDate)
                                            .InputAttr("aria-label", "Date")
                                            .Type(DateBoxType.Date)
                                            .Value("")
                                            .ID("fecha_inicio")
                                            )
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.EndDate)</div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().DateBoxFor(x => x.EndDate)
                                            .InputAttr("aria-label", "Date")
                                            .Type(DateBoxType.Date)
                                            .Value("")
                                            .ID("fecha_fin")
                                            )
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.TaskStatusID)</div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().SelectBoxFor(x => x.TaskStatusID)
                                            .DisplayExpr("Text")
                                            .ValueExpr("Value")
                                            .DataSource(ds => ds.Mvc().Controller("APIProjectTasks").LoadAction("ProjectTaskStatusLookup").Key("Value"))
                                            .ID("cod_estado_tarea")
                                            @*.Value($"{TempData["Status"]}")*@
                                            .Disabled(true)
                                            )
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="hora">Tiempo Estimado</label>
                                <div class="form-row">
                                    <div class="form-group col-md-4">
                                        @(Html.DevExtreme().NumberBoxFor(x => x.EstimateTime).Mode(NumberBoxMode.Number).Min(0.0).ID("hora").Value(1.0))
                                    </div>
                                    <div class="form-group col-md-2"><label for="hora">Horas</label></div>
                                    <div class="form-group col-md-4">
                                        @(Html.DevExtreme().NumberBoxFor(x => x.ExecutionTime).Mode(NumberBoxMode.Number).Min(0.0).ID("minuto").Value(0.0))
                                    </div>
                                    <div class="form-group col-md-2"><label for="minuto">Minutos</label></div>
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ResponsibleID)</div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().SelectBoxFor(x => x.ResponsibleID)
                                            .DisplayExpr("FirstNameAndLastNAme")
                                            .ValueExpr("UserDataID")
                                            .DataSource(ds => ds.Mvc().Controller("APIProjectTasks").LoadAction("ResponsibleLookup").Key("UserDataID"))
                                            .ID("cod_responsable")
                                            )
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Comment)</div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().TextAreaFor(x => x.Comment).ID("comentario"))
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="hidden" id="id_proyecto_tarea" name="id_proyecto_tarea" value="">
                        <input type="hidden" id="cod_proyecto" name="cod_proyecto" value="">
                        @(Html.DevExtreme().Button()
                            .ElementAttr("class", "validate")
                            .Text("Guardar")
                            .Type(ButtonType.Success)
                            .UseSubmitBehavior(true)
                            )
                        <button type="button" class="btn btn-dark" data-dismiss="modal">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</form>
<form name="form2" id="form2" method="post" onsubmit="return false;">
    <!-- Modal -->
    <div class="modal fade" id="ModalHistorialRegistro" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog" aria-labelledby="ModalHistorialRegistro" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-scrollable" style='font-size:14px'>
            <div class="modal-content" id="div_historial" name='div_historial'>
            </div>
        </div>
    </div>
</form>
@{
    ProjectTaskRegistry partialModel = new();
}
<partial name="_ModalRegisterTask" model="@partialModel" />
<script>
    DevExpress.config({
        editorStylingMode: "filled"
    });

    $("#cancel").click(function () {
        history.back();
        return false;
    });

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('ListaProyectos');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Proyectos.xlsx');
            });
        });
        e.cancel = true;
    }
    function hideHistorialModal() {
        $('#ModalHistorialRegistro').modal('hide')
    }
    function showHistorial(taskID) {
        $.ajax({
            type: 'get',
            url: `/project/task/historial/${taskID}`,
            success: (res) => {
                $('#div_historial').html(res)
                $('#ModalHistorialRegistro').modal('show')
            }
        })
    }
    function deleteHistorialRecord(historialID, taskID) {
        DevExpress.ui.dialog.confirm("¿Estás seguro de que deseas eliminar este registro?", "Confirmar eliminación").done(function (dialogResult) {
            if (dialogResult) {
                $.ajax({
                    type: 'delete',
                    url: `/project/task/history/${historialID}`,
                    success: (res) => {
                        DevExpress.ui.notify("Registro eliminado con exito", "success");
                        $.ajax({
                            type: 'get',
                            url: `/project/task/historial/${taskID}`,
                            success: (res) => {
                                $('#div_historial').html(res)
                            }
                        })
                    },
                    error: () => {
                        DevExpress.ui.notify("Error al eliminar el registro", "error");
                    }
                })
            }
        });
    }
</script>