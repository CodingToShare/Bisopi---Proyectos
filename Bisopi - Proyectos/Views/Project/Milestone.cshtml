@model Milestone

<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.10.1/polyfill.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>

<a type="button" class="btn p-1 btn-outline-secondary" href="/Project/Create">
    <img title="Nuevo" style="width:24px;cursor:pointer;" src="~/img/add.png" />
    Nuevo
</a>
<a type="button" class="btn p-1 btn-outline-secondary" href="/Project/Index">
    <img title="Listado" style="width:24px;cursor:pointer;" src="~/img/list.png" />
    Listado
</a>

<div class="p-3" style='font-size:14px'>
    <div class="h3">Hito</div>
    <partial name="_ProjectInfo" model="Model.Project" />
    <div class="p-3">
        @(Html.DevExtreme().DataGrid<Bisopi___Proyectos.Models.Milestone>()
            .ID("gridContainer")
            .AllowColumnReordering(true)
            .RowAlternationEnabled(true)
            .AllowColumnResizing(true)
            .ShowRowLines(true)
            .ShowBorders(true)
            .WordWrapEnabled(true)
            .ColumnAutoWidth(true)
            .ColumnResizingMode(ColumnResizingMode.Widget)
            .SearchPanel(s => s
            .Visible(true)
            .HighlightCaseSensitive(true))
            .Grouping(grouping => grouping.AutoExpandAll(true))
            .GroupPanel(groupPanel => groupPanel.Visible(true))
            .FilterPanel(f => f.Visible(true))
            .HeaderFilter(h => h.Visible(true))
            .Selection(s => s.Mode(SelectionMode.Multiple))
            .Export(e => e.Enabled(true).AllowExportSelectedData(true))
            .OnExporting("exporting")
            .RemoteOperations(true)
            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
            .DataSource(ds => ds.Mvc()
            .LoadParams(new { id = Model.ProjectID })
            .Controller("APIMilestones")
            .LoadAction("Get")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("MilestoneID")
            )
            .OnInitNewRow(@<text>
                function(e) {
                e.data.ProjectID = $('.ProjectID').val();
                }
            </text>)
            .RemoteOperations(true)
            .Columns(columns =>
            {

                columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });

                columns.AddFor(m => m.MilestoneDate);

                columns.AddFor(m => m.CurrencyID).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("APIMilestones").LoadAction("CurrenciesLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                );

                columns.AddFor(m => m.Percentage);

                columns.AddFor(m => m.Value).Format("$ #,##0.##");

                columns.AddFor(m => m.MilestoneNumber).SortOrder(SortOrder.Asc);

                columns.AddFor(m => m.IsItChangeControl);

                columns.AddFor(m => m.Hours);

                columns.AddFor(m => m.Retention);

                columns.AddFor(m => m.RetentionValue).Format("$ #,##0.##");

                columns.AddFor(m => m.TotalBill).Format("$ #,##0.##");

                columns.AddFor(m => m.TRM).Format("$ #,##0.##");

                columns.AddFor(m => m.SubTotalBillCOP).Format("$ #,##0.##");

                columns.AddFor(m => m.RetentionValueCOP).Format("$ #,##0.##");

                columns.AddFor(m => m.ValueAddedTax).Format("$ #,##0.##");

                columns.AddFor(m => m.ValueAddedTaxWuthholding).Format("$ #,##0.##");

                columns.AddFor(m => m.TotalBillCOP).Format("$ #,##0.##");

                columns.AddFor(m => m.Comment);
            })
            .Editing(e => e
            .AllowUpdating(true)
            .AllowDeleting(true)
            .Mode(GridEditMode.Popup)
            .UseIcons(true)
            )
            .MasterDetail(m => m
            .Enabled(true)
            .Template(new TemplateName("gridContainer-bills"))
            )
        )
        @using (Html.DevExtreme().NamedTemplate("gridContainer-bills"))
        {
            @(Html.DevExtreme().DataGrid<Bisopi___Proyectos.Models.Bill>()
                .AllowColumnReordering(true)
                .RowAlternationEnabled(true)
                .AllowColumnResizing(true)
                .ShowRowLines(true)
                .ShowBorders(true)
                .WordWrapEnabled(true)
                .ColumnAutoWidth(true)
                .ColumnResizingMode(ColumnResizingMode.Widget)
                .SearchPanel(s => s
                .Visible(true)
                .HighlightCaseSensitive(true))
                .Grouping(grouping => grouping.AutoExpandAll(true))
                .GroupPanel(groupPanel => groupPanel.Visible(true))
                .FilterPanel(f => f.Visible(true))
                .HeaderFilter(h => h.Visible(true))
                .Selection(s => s.Mode(SelectionMode.Multiple))
                .Export(e => e.Enabled(true).AllowExportSelectedData(true))
                .OnExporting("exporting")
                .RemoteOperations(true)
                .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                    .DataSource(ds => ds.Mvc()
                        .Controller("APIBills")
                        .LoadAction("Get")
                        .UpdateAction("Put")
                        .Key("BillID")
                        .LoadParams(new { id = new JS("data.MilestoneID") })
                    )
                    .RemoteOperations(true)
                    .Columns(columns => {

                        columns.Add()
                        .Type(GridCommandColumnType.Buttons)
                        .Width(110)
                        .Buttons(b =>
                        {
                            b.Add().Name(GridColumnButtonName.Edit);
                            b.Add().Template(@<text> <a href="/Project/UpdateStateBill/<%- data.BillID %>" data-toggle="tooltip"><img src="~/img/approved.png" style="height:20px;width:20px;" /></a>   </text>).Visible(new JS("vEdit"));
                        });
                            
                        columns.AddFor(m => m.StatusBill).Lookup(l => l.DataSource(Html.GetEnumSelectList<Bisopi___Proyectos.Enums.StatusBill>()
                        .Select(i => new { Value = int.Parse(i.Value), Text = i.Text })
                        )
                        .ValueExpr("Value")
                        .DisplayExpr("Text")).AllowEditing(false);

                        columns.AddFor(m => m.InvoiceShipmentDate);

                        columns.AddFor(m => m.IssuedDocument);

                        columns.AddFor(m => m.RelatedDocument);

                        columns.AddFor(m => m.NoteInvoice);

                        columns.AddFor(m => m.InvoiceData);

                        columns.AddFor(m => m.ConceptInvoice);

                        columns.AddFor(m => m.ProposalDocument);

                        columns.AddFor(m => m.IsActive).AllowEditing(false);

                        columns.AddFor(m => m.CreatedBy).AllowEditing(false);

                        columns.AddFor(m => m.Created).AllowEditing(false);

                        columns.AddFor(m => m.ModifiedBy).AllowEditing(false);

                        columns.AddFor(m => m.Modified).AllowEditing(false);
                    })
                    .Editing(e => e
                        .AllowUpdating(true)
                        .Mode(GridEditMode.Popup)
                        .UseIcons(true)
                    )
                )
        }
    </div>
    <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#ModalHito" name="openTarea" id="openTarea">Agregar Hito</button>
    <button id="cancel" name='cancel' type="submit" class="btn btn-dark">Cancelar</button>
</div>

@using (Html.BeginForm("Milestone", "Project", FormMethod.Post))
{
    @using (Html.DevExtreme().ValidationGroup())
    {
        @Html.HiddenFor(x => x.ProjectID, new { @class = "ProjectID", @id = "ProjectID" })
        @Html.HiddenFor(x => x.DealID, new { @class = "DealID" })
        @Html.HiddenFor(x => x.ProjectValue, new { @class = "ProjectValue", @id = "ProjectValue" })
        <!-- Modal -->
        <div class="modal fade" id="ModalHito" tabindex="-1" data-backdrop="static" data-keyboard="true" role="dialog" aria-labelledby="ModalHito" aria-hidden="true">
            <div class="modal-dialog modal-lg" style='font-size:14px'>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="tareaModalLabel">Agregar Hito</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="form-row">
                            <div class="form-group col-md-3">
                                <div class="dx-field">
                                    <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.MilestoneDate)
                                        @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.MilestoneDate)).IsRequired)
                                        {
                                            <span style="color: red;">*</span>
                                        }
                                    </div>
                                    <div class="dx-field-item-content-location-bottom">
                                        @(Html.DevExtreme().DateBoxFor(x => x.MilestoneDate)
                                            .InputAttr("aria-label", "Date")
                                            .Type(DateBoxType.Date)
                                            .Value("")
                                            .ID("MilestoneDate")
                                            )
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <div class="dx-field">
                                        <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.CurrencyID)
                                            @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.CurrencyID)).IsRequired)
                                            {
                                                <span style="color: red;">*</span>
                                            }
                                        </div>
                                        <div class="dx-field-item-content-location-bottom">
                                            @(Html.DevExtreme().SelectBoxFor(x => x.CurrencyID)
                                                .DisplayExpr("CurrencyNameAndAbbreviation")
                                                .ValueExpr("CurrencyID")
                                                .ID("currencyID")
                                                .DataSource(d => d.Mvc().Controller("APICurrencies").LoadAction("GetSelectBox").Key("CurrencyID"))
                                                .SearchMode(DropDownSearchMode.Contains)
                                                .SearchEnabled(true)
                                                .MinSearchLength(3)
                                                .ShowDataBeforeSearch(true)
                                                .ShowDropDownButton(true)
                                                .DeferRendering(false)
                                                .Placeholder("Seleccione una moneda...")
                                                )
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <div class="dx-field">
                                        <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Percentage)
                                            @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.Percentage)).IsRequired)
                                            {
                                                <span style="color: red;">*</span>
                                            }
                                        </div>
                                        <div class="dx-field-item-content-location-bottom">
                                            @(Html.DevExtreme().NumberBoxFor(x => x.Percentage)
                                                .ID("Percentage")
                                                .Placeholder("Escriba el porcentaje")
                                                .Format("## %")
                                                .InputAttr("aria-label", "Currency Format")
                                                .OnValueChanged("onMilestonePercentageChange")
                                                .Max(1)
                                                )
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <div class="dx-field">
                                        <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Value)
                                            @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.Value)).IsRequired)
                                            {
                                                <span style="color: red;">*</span>
                                            }
                                        </div>
                                        <div class="dx-field-item-content-location-bottom">
                                            @(Html.DevExtreme().NumberBoxFor(x => x.Value)
                                                .ID("Value")
                                                .Placeholder("Escriba el valor")
                                                .Format("$ #,##0.##")
                                                .InputAttr("aria-label", "Currency Format")
                                                .Max(Model.ProjectValue.Value)
                                                .OnValueChanged("onMilestoneValueChange")
                                                )
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <div class="dx-field">
                                        <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.MilestoneNumber)
                                            @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.MilestoneNumber)).IsRequired)
                                            {
                                                <span style="color: red;">*</span>
                                            }
                                        </div>
                                        <div class="dx-field-item-content-location-bottom">
                                            @(Html.DevExtreme().NumberBoxFor(x => x.MilestoneNumber)
                                                .ID("MilestoneNumber")
                                                .Placeholder("Escriba el numero del hito")
                                                .InputAttr("aria-label", "Currency Format")
                                                )
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <div class="dx-field">
                                        <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.IsItChangeControl)
                                            @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.IsItChangeControl)).IsRequired)
                                            {
                                                <span style="color: red;">*</span>
                                            }
                                        </div>
                                        <div class="dx-field-item-content-location-bottom">
                                            @(Html.DevExtreme().CheckBoxFor(x => x.IsItChangeControl)
                                                .ID("IsItChangeControl")
                                                .Value(true)
                                                .ElementAttr("aria-label", "Checked")
                                                )
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <div class="dx-field">
                                        <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Hours)
                                            @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.Hours)).IsRequired)
                                            {
                                                <span style="color: red;">*</span>
                                            }
                                        </div>
                                        <div class="dx-field-item-content-location-bottom">
                                            @(Html.DevExtreme().NumberBoxFor(x => x.Hours)
                                                .ID("Hours")
                                                .Placeholder("Escriba las horas del hito")
                                                .InputAttr("aria-label", "Currency Format")
                                                )
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="form-group">
                                    <div class="dx-field">
                                        <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Comment)
                                            @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.Comment)).IsRequired)
                                            {
                                                <span style="color: red;">*</span>
                                            }
                                        </div>
                                        <div class="dx-field-item-content-location-bottom">
                                            @(Html.DevExtreme().TextAreaFor(x => x.Comment)
                                                .ID("Comment")
                                                .Placeholder("Escriba los comentarios")
                                                .AutoResizeEnabled(true)
                                                )
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="hidden" id="id_proyecto_tarea" name="id_proyecto_tarea" value="">
                        <input type="hidden" id="cod_proyecto" name="cod_proyecto" value="">
                        @(Html.DevExtreme().Button()
                            .ElementAttr("class", "validate")
                            .Text("Guardar")
                            .Type(ButtonType.Success)
                            .UseSubmitBehavior(true)
                            )
                        <button type="button" class="btn btn-dark" data-dismiss="modal">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

<script>
    DevExpress.config({
        editorStylingMode: "filled"
    });

    $("#cancel").click(function () {
        history.back();
        return false;
    });

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('ListaProyectos');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Proyectos.xlsx');
            });
        });
        e.cancel = true;
    }

    function vEdit(e) {
        console.log(e);
        console.log(e.row.data.StatusBill);
        if (e.row.data.StatusBill == 10) {
            return true;
        }
        return false;
    }

    function onMilestonePercentageChange(e) {
        console.log(e.value);
        console.log($("#Value").dxNumberBox("instance").option("value"));

        var valorProyecto = document.getElementById("ProjectValue").value;
        var valorHito = $("#Value").dxNumberBox("instance").option("value");
        var porcentajeHito = e.value;

        var calculo = (porcentajeHito * valorProyecto) / 1

        $("#Value").dxNumberBox("instance").option("value", calculo);

    }

    function onMilestoneValueChange(e) {
        console.log(e.value);
        console.log($("#Percentage").dxNumberBox("instance").option("value"));

        var valorProyecto = document.getElementById("ProjectValue").value;
        var valorHito = e.value;
        var porcentajeHito = $("#Percentage").dxNumberBox("instance").option("value");

        var calculo = (valorHito * 1) / valorProyecto

        $("#Percentage").dxNumberBox("instance").option("value", calculo);

    }
</script>