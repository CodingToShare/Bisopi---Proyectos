@(Html.DevExtreme().DataGrid<Bisopi___Proyectos.Models.ProjectTask>()
    .DataSource(ds => ds.Mvc()
        .Controller("APIHomeProjectTasks")
        .LoadAction("Get")
        .UpdateAction("Put")
        .Key("TaskID")
    )
    .OnContentReady("init")
    .RemoteOperations(true)
    .Columns(columns =>
    {

        columns.AddFor(m => m.TaskName).AllowEditing(false);

        columns.AddFor(m => m.TaskGroupID).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("APIHomeProjectTasks").LoadAction("TaskGroupLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).GroupIndex(1).AllowEditing(false);

        columns.AddFor(m => m.Comment).AllowEditing(false);

        columns.AddFor(m => m.ProjectID).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("APIHomeProjectTasks").LoadAction("ProjectsLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        ).GroupIndex(0).AllowEditing(false);

        columns.AddFor(m => m.TaskStatusID).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("APIHomeProjectTasks").LoadAction("ProjectTaskStatusLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.StartDate).AllowEditing(false);

        columns.AddFor(m => m.EndDate).AllowEditing(false);

        columns.AddFor(m => m.EstimateTime).CalculateCellValue(@<text>
            function(data) {
            var timeInSeconds = data['EstimateTime']
            var hours = Math.floor(timeInSeconds / 3600);
            var minutes = Math.floor((timeInSeconds % 3600) / 60);
            var seconds = timeInSeconds % 60;
            var formattedTime = "";
            if (hours > 0) {
            formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} horas`;
            } else if (minutes > 0) {
            formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} min`;
            } else {
            formattedTime = `${seconds.toString().padStart(2, '0')} seg`;
            }
            return formattedTime;
            }
        </text>)
        .AllowEditing(false);

        columns.AddFor(m => m.ExecutionTime)
        .CalculateCellValue(@<text>
            function(data) {
            var timeInSeconds = data['ExecutionTime']
            var hours = Math.floor(timeInSeconds / 3600);
            var minutes = Math.floor((timeInSeconds % 3600) / 60);
            var seconds = timeInSeconds % 60;
            var formattedTime = "";
            if (hours > 0) {
            formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} horas`;
            } else if (minutes > 0) {
            formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} min`;
            } else {
            formattedTime = `${seconds.toString().padStart(2, '0')} seg`;
            }
            return formattedTime;
            }
        </text>)
        .AllowEditing(false);

        columns.Add().CellTemplate(@<text>
            <img id="task_<%- data.TaskID%>" src="~/img/play_time.png" style='width:24px;cursor:pointer;' name="playOrStop" onclick="playTask('<%- data.TaskID%>')" title="Iniciar tarea" />
            <img class="mx-1" style='width:24px;cursor:pointer;' src="~/img/add_time.png" title='Registrar Hora' onclick="showRegisterModal('<%- data.TaskID%>')" />
            <img style='width:24px;cursor:pointer;' src="~/img/history_time.png" title='Historial' onclick="showHistorial('<%- data.TaskID%>')" />
        </text>).Width(110);
    })
    .Editing(editing =>
    {
        editing.Mode(GridEditMode.Cell);
        editing.AllowUpdating(true);
    })
)


@{
    ProjectTaskRegistry partialModel = new();
}
<partial name="_ModalRegister" model="@partialModel" />

<form name="form2" id="form2" method="post" onsubmit="return false;">
    <!-- Modal -->
    <div class="modal fade" id="ModalHistorialRegistro" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog" aria-labelledby="ModalHistorialRegistro" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-scrollable" style='font-size:14px'>
            <div class="modal-content" id="div_historial" name='div_historial'>
            </div>
        </div>
    </div>
</form>



<script>
    function showRegisterModal(taskID) {
        $('#ProjectTaskID').val(taskID)
        $('#ModalRegistro').modal('show')
    }
    function hideHistorialModal() {
        $('#ModalHistorialRegistro').modal('hide')
    }
    function showHistorial(taskID) {
        $.ajax({
            type: 'get',
            url: `/project/task/historial/${taskID}`,
            success: (res) => {
                $('#div_historial').html(res)
                $('#ModalHistorialRegistro').modal('show')
            }
        })
    }
    function deleteHistorialRecord(historialID, taskID) {
        DevExpress.ui.dialog.confirm("¿Estás seguro de que deseas eliminar este registro?", "Confirmar eliminación").done(function (dialogResult) {
            if (dialogResult) {
                $.ajax({
                    type: 'delete',
                    url: `/project/task/history/${historialID}`,
                    success: (res) => {
                        DevExpress.ui.notify("Registro eliminado con exito", "success");
                        $.ajax({
                            type: 'get',
                            url: `/project/task/historial/${taskID}`,
                            success: (res) => {
                                $('#div_historial').html(res)
                            }
                        })
                    },
                    error: () => {
                        DevExpress.ui.notify("Error al eliminar el registro", "error");
                    }
                })
            }
        });
    }
</script>