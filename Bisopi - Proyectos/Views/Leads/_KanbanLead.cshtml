@model Bisopi___Proyectos.ViewModels.KanbanLeadViewModel
@using Microsoft.AspNetCore.Html
@using Bisopi___Proyectos.Models

<style>
    .btn-group-horizontal {
        display: flex;
        gap: 10px; /* Añade espacio entre los botones */
    }
    
    .btn-icon {
        width: 30px; /* Ancho fijo para los botones */
        height: 30px; /* Alto fijo para los botones */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .icon {
        width: 25px; /* Ancho fijo para los botones */
        height: 25px; /* Alto fijo para los botones */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-white {
        background-color: white; /* Fondo blanco para los botones */
        border: 1px solid #ccc; /* Agrega un borde para resaltar el botón */
    }
</style>

@functions {
    class CardTasks {
        public Lead Task { get; set; }
    }
}

@{
    Func<CardTasks, IHtmlContent> CreateCards = @<div class="card dx-card dx-theme-text-color dx-theme-background-color" data-target-id="@item.Task.LeadID" >
        <div class="card-priority priority-2"></div>
        <div class="card-subject">@item.Task.LeadName</div>
        @{
                string[] dayAbbreviations = { "Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb" };
                var dayOfWeekAbbreviated = dayAbbreviations[(int)item.Task.Created.DayOfWeek];
                var formattedDate = $"{dayOfWeekAbbreviated} {item.Task.Created:MM} / {item.Task.Created:yyyy}";
        }
        <div class="card-assignee">Fecha: @formattedDate</div>
        @{
                var LeadValueFormat = String.Format("{0:C}", item.Task.LeadValue);
        }
        <div class="card-assignee">Valor (@item.Task.Abbreviation): @LeadValueFormat</div>
        @{
                var calculateTRM = item.Task.LeadValue * item.Task.ProjectedRm;
                var calculateTRMString = String.Format("{0:C}", calculateTRM);
        }
        <div class="card-assignee">Valor (COP): @calculateTRMString</div>

        <div class="card-buttons">
            <div class="btn-group-horizontal">
                <button class="btn btn-white btn-icon" onclick="redirectToEdit('@item.Task.LeadID.ToString()')">
                    <img class="icon" src="~/img/edit.png">
                </button>

                <button class="btn btn-white btn-icon" onclick="redirectToLeadToDeal('@item.Task.LeadID.ToString()')">
                    <img class="icon" src="~/img/convert.png">
                </button>

                <button class="btn btn-white btn-icon" onclick="confirmDelete('@item.Task.LeadID.ToString()')">
                    <img class="icon" src="~/img/trash.png">
                </button>
            </div>
        </div>
    </div>;
}

<div class="list">
    @{
        var totalCalculateTRM = 0.0;
        foreach (var task in @Model.LeadsIEnumerable)
        {
            if (task.LeadValue != null && task.ProjectedRm != null)
            {
                totalCalculateTRM += (Double)(task.LeadValue * task.ProjectedRm);
            }
            else
            {
                totalCalculateTRM += 0;
            }
            
        }
    }
    <div class="list-title dx-theme-text-color" style="background-color:@Model.Color;">
        @Model.Status
    </div>
    <div class="list-title dx-theme-text-color" style="background-color:@Model.Color;">
        Total: @(string.Format("{0:C}", totalCalculateTRM))
    </div>
    @(Html.DevExtreme().ScrollView()
        .ElementAttr("class", "scrollable-list")
        .Direction(ScrollDirection.Vertical)
        .ShowScrollbar(ShowScrollbarMode.Always)
        .Content(
            Html.DevExtreme().Sortable()
                .ElementAttr("class", "sortable-cards")
                .ItemOrientation(Orientation.Vertical)
                .MoveItemOnDrop(true)
                .Group("tasksGroup")
                .OnDragEnd("function(e) { handleDragEnd(e); }")
                .OnAdd("handleScrollViewOptionChanged")
                .Content(@<text>
                    @foreach (var task in @Model.LeadsIEnumerable) {
                        @CreateCards(new CardTasks { Task = task })
                    }
                </text>).ToString()
        )
    )
</div>

<script>
    function handleDragEnd(e) {
        var targetId = e.itemElement.data("target-id");
        var targetStatus = $(e.itemElement).closest(".list").find(".list-title").text();

        console.log(targetId);
        console.log(targetStatus);
    }

    function handleScrollViewOptionChanged(e) {
        console.log("Contenido del ScrollView ha cambiado");
        console.log("Nuevos elementos:", e);

        $(".sortable-cards").each(function() {
            var cardText = $(this).find(".card-subject").text();
            console.log("Texto de la tarjeta:", cardText);
        });
    }

    function confirmDelete (id) {
        console.log(id);

        DevExpress.ui.dialog.confirm("¿Estás seguro de que deseas eliminar este proyecto?", "Confirmar eliminación").done(function (dialogResult) {
            if (dialogResult) {
                // Si el usuario selecciona "Aceptar", redirecciona a la vista project/delete con el ProjectID en la URL
                var url = '/Leads/delete/' + id;
                window.location.href = url;
            } else {
                // Si el usuario selecciona "Cancelar", no se hace nada
            }
        });
    }

    function redirectToEdit(id) {
        console.log(id);

        var url = '/Leads/edit/' + id; // Construye la URL con el ProjectID
        window.location.href = url; // Redirecciona a la vista project/edit con el ProjectID en la URL
    }

    function redirectToLeadToDeal(id) {
        console.log(id);

        var url = '/Leads/LeadToDeal/' + id; // Construye la URL con el ProjectID
        window.location.href = url; // Redirecciona a la vista project/edit con el ProjectID en la URL
    }

</script>



