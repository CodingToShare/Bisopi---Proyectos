<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css" />

@model Bisopi___Proyectos.Models.Project

<h4>Deal to Project</h4>
<hr />
<br />

<div class="row">
    <div class="col-12">
        <span class="float-right">
            <a class="btn btn-dark" href="/Project/Index">Volver</a>
        </span>
    </div>
    <div class="col-12">
        <form asp-controller="Deals" asp-action="DealToProject" method="post" enctype="multipart/form-data">
            @Html.HiddenFor(x => x.ProjectID, new { @class = "ProjectID" })
            @Html.HiddenFor(x => x.DealID, new { @class = "DealID" })
            @Html.HiddenFor(x => x.IsActive, new { @class = "IsActive" })
            @Html.HiddenFor(x => x.Created, new { @class = "Created" })
            @Html.HiddenFor(x => x.CreatedBy, new { @class = "CreatedBy" })
            @Html.HiddenFor(x => x.Modified, new { @class = "Modified" })
            @Html.HiddenFor(x => x.ModifiedBy, new { @class = "ModifiedBy" })
            @using (Html.DevExtreme().ValidationGroup())
            {
                <div class="row">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProjectName)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ProjectName)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextBoxFor(x => x.ProjectName)
                                        .ID("projectName")
                                        .Placeholder("Escriba el nombre del proyecto")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.CountryID)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.CountryID)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.CountryID)
                                        .DisplayExpr("CountryNameAndAbbreviation")
                                        .ValueExpr("CountryID")
                                        .ID("countryID")
                                        .DataSource(d => d.Mvc().Controller("APICountries").LoadAction("GetSelectBox").Key("CountryID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un pais...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ClientID)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ClientID)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.ClientID)
                                        .DisplayExpr("ClientNameAndAbbreviation")
                                        .ValueExpr("ClientID")
                                        .ID("clientID")
                                        .DataSource(d => d.Mvc().Controller("APIClients").LoadAction("GetSelectBox").Key("ClientID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un líder...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-7">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.CustomerManager)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.CustomerManager)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextBoxFor(x => x.CustomerManager)
                                        .ID("customerManager")
                                        .Placeholder("Escriba el responsable del cliente")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.LeaderID)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.LeaderID)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.LeaderID)
                                        .DisplayExpr("FirstNameAndLastNAme")
                                        .ValueExpr("UserDataID")
                                        .ID("leaderID")
                                        .DataSource(d => d.Mvc().Controller("APIUsers").LoadAction("GetUsersByRole").LoadParams(new { role = "Líder" }).Key("LeaderID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un lider...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProjectManagerID)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ProjectManagerID)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.ProjectManagerID)
                                        .DisplayExpr("FirstNameAndLastNAme")
                                        .ValueExpr("UserDataID")
                                        .ID("projectManagerID")
                                        .DataSource(d => d.Mvc().Controller("APIUsers").LoadAction("GetUsersByRole").LoadParams(new { role = "Gerente de proyecto" }).Key("LeaderID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un cliente...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProjectStatusID)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ProjectStatusID)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.ProjectStatusID)
                                        .DisplayExpr("ProjectStatusNameAndAbbreviation")
                                        .ValueExpr("ProjectStatusID")
                                        .ID("projectStatusID")
                                        .DataSource(d => d.Mvc().Controller("APIProjectStatus").LoadAction("GetSelectBox").Key("ProjectStatusID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un estado del proyecto...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProjectTypeID)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ProjectTypeID)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.ProjectTypeID)
                                        .DisplayExpr("ProjectTypeName")
                                        .ValueExpr("ProjectTypeID")
                                        .ID("projectTypeID")
                                        .DataSource(d => d.Mvc().Controller("APIProjectTypes").LoadAction("GetSelectBox").Key("ProjectTypeID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un tipo de proyecto...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.SupportStatusID)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.SupportStatusID)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.SupportStatusID)
                                        .DisplayExpr("SupportStatusName")
                                        .ValueExpr("SupportStatusID")
                                        .ID("supportStatusID")
                                        .DataSource(d => d.Mvc().Controller("APISupportStatus").LoadAction("GetSelectBox").Key("SupportStatusID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un tipo de proyecto...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.EstimateRequestDate)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.EstimateRequestDate)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().DateBoxFor(x => x.EstimateRequestDate)
                                        .InputAttr("aria-label", "Date")
                                        .Type(DateBoxType.Date)
                                        .Value(DateTime.Now)
                                        .Placeholder("Seleccione la fecha de solicitud de estimacion ...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.AnswerDate)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.AnswerDate)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().DateBoxFor(x => x.AnswerDate)
                                        .InputAttr("aria-label", "Date")
                                        .Type(DateBoxType.Date)
                                        .Value(DateTime.Now)
                                        .Placeholder("Seleccione la fecha de respuesta ...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.RequestPriority)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.RequestPriority)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextBoxFor(x => x.RequestPriority)
                                        .ID("requestPriority")
                                        .Placeholder("Escriba la prioridad de la solicitud")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ScalerCode)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ScalerCode)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextBoxFor(x => x.ScalerCode)
                                        .ID("scalerCode")
                                        .Placeholder("Escriba el codigo baremador")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ClarityCode)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ClarityCode)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextBoxFor(x => x.ClarityCode)
                                        .ID("clarityCode")
                                        .Placeholder("Escriba el codigo de clarity")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.EstimatedHours)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.EstimatedHours)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.EstimatedHours)
                                        .ID("estimatedHours")
                                        .Placeholder("Escriba las horas estimadas")
                                        .InputAttr("aria-label", "Currency Format")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.StartDate)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.StartDate)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().DateBoxFor(x => x.StartDate)
                                        .InputAttr("aria-label", "Date")
                                        .Type(DateBoxType.Date)
                                        .Value(DateTime.Now)
                                        .Placeholder("Seleccione la fecha de inicio ...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.EstimatedDeliveryDate)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.EstimatedDeliveryDate)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().DateBoxFor(x => x.EstimatedDeliveryDate)
                                        .InputAttr("aria-label", "Date")
                                        .Type(DateBoxType.Date)
                                        .Value(DateTime.Now)
                                        .Placeholder("Seleccione la fecha de entrega estimada ...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ActualCompletionDate)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ActualCompletionDate)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().DateBoxFor(x => x.ActualCompletionDate)
                                        .InputAttr("aria-label", "Date")
                                        .Type(DateBoxType.Date)
                                        .Value(DateTime.Now)
                                        .Placeholder("Seleccione la fecha real de finalizacion ...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.CurrencyID)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.CurrencyID)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.CurrencyID)
                                        .DisplayExpr("CurrencyNameAndAbbreviation")
                                        .ValueExpr("CurrencyID")
                                        .ID("currencyID")
                                        .DataSource(d => d.Mvc().Controller("APICurrencies").LoadAction("GetSelectBox").Key("CurrencyID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione una moneda...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProjectValue)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ProjectValue)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.ProjectValue)
                                        .ID("projectValue")
                                        .Placeholder("Escriba el valor del proyecto")
                                        .Format("$ #,##0.##")
                                        .InputAttr("aria-label", "Currency Format")
                                        .OnValueChanged("onProjectValueChange")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProjectCost)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.ProjectCost)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.ProjectCost)
                                        .ID("projectCost")
                                        .Placeholder("Escriba el costo del proyecto")
                                        .Format("$ #,##0.##")
                                        .InputAttr("aria-label", "Currency Format")
                                        .OnValueChanged("onProjectCostChange")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.TRMProject)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.TRMProject)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.TRMProject)
                                        .ID("tRMProject")
                                        .Placeholder("Escriba la TRM del proyecto")
                                        .Format("$ #,##0.##")
                                        .InputAttr("aria-label", "Currency Format")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.GrossMargin)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.GrossMargin)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.GrossMargin)
                                        .ID("grossMargin")
                                        .Disabled(true)
                                        .Format("## %")
                                        .InputAttr("aria-label", "Currency Format")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Billable)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.Billable)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().CheckBoxFor(x => x.Billable)
                                        .ID("billable")
                                        .Value(true)
                                        .ElementAttr("aria-label", "Checked")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Justification)
                                    @if (ViewData.ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == nameof(Model.Justification)).IsRequired)
                                    {
                                        <span style="color: red;">*</span>
                                    }
                                </div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextAreaFor(x => x.Justification)
                                        .ID("justification")
                                        .Placeholder("Escriba la justificacion")
                                        .AutoResizeEnabled(true)
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <h5>Hitos</h5>

                    <div class="col-md-12">
                        @(Html.DevExtreme().DataGrid<Bisopi___Proyectos.ModelsTemps.MilestoneTemp>()
                            .ID("gridContainer")
                            .AllowColumnReordering(true)
                            .RowAlternationEnabled(true)
                            .AllowColumnResizing(true)
                            .ShowRowLines(true)
                            .ShowBorders(true)
                            .WordWrapEnabled(true)
                            .ColumnAutoWidth(true)
                            .ColumnResizingMode(ColumnResizingMode.Widget)
                            .SearchPanel(s => s
                            .Visible(true)
                            .HighlightCaseSensitive(true))
                            .Grouping(grouping => grouping.AutoExpandAll(true))
                            .GroupPanel(groupPanel => groupPanel.Visible(true))
                            .FilterPanel(f => f.Visible(true))
                            .HeaderFilter(h => h.Visible(true))
                            .Selection(s => s.Mode(SelectionMode.Multiple))
                            .RemoteOperations(true)
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                            .DataSource(ds => ds.Mvc()
                            .LoadParams(new { id = Model.DealID })
                            .Controller("APIMilestoneTemps")
                            .LoadAction("Get")
                            .InsertAction("Post")
                            .UpdateAction("Put")
                            .DeleteAction("Delete")
                            .Key("MilestoneTempID")
                            )
                            .OnInitNewRow(@<text>
                                function(e) {
                                e.data.ProjectID = $('.ProjectID').val();
                                e.data.DealID = $('.DealID').val();
                                }
                            </text>)
                            .RemoteOperations(true)
                            .Columns(columns =>
                            {

                                columns.Add()
                                .Type(GridCommandColumnType.Buttons)
                                .Width(110)
                                .Buttons(b =>
                                {
                                    b.Add().Name(GridColumnButtonName.Edit);
                                    b.Add().Name(GridColumnButtonName.Delete);
                                });

                                columns.AddFor(m => m.MilestoneDate);

                                columns.AddFor(m => m.CurrencyID).Lookup(lookup => lookup
                                .DataSource(ds => ds.WebApi().Controller("APIMilestoneTemps").LoadAction("CurrenciesLookup").Key("Value"))
                                .ValueExpr("Value")
                                .DisplayExpr("Text")
                                );

                                columns.AddFor(m => m.Percentage);

                                columns.AddFor(m => m.Value);

                                columns.AddFor(m => m.MilestoneNumber);

                                columns.AddFor(m => m.IsItChangeControl);

                                columns.AddFor(m => m.Hours);

                                columns.AddFor(m => m.Comment);
                            })
                            .Editing(e => e
                            .AllowAdding(true)
                            .AllowUpdating(true)
                            .AllowDeleting(true)
                            .Mode(GridEditMode.Popup)
                            .UseIcons(true)
                            )
                            )
                    </div>

                    <h5>Planificación Colaboradores</h5>

                    <div class="col-md-12">
                        @(Html.DevExtreme().DataGrid<Bisopi___Proyectos.ModelsTemps.ResourcePlanningTemp>()
                            .ID("gridContainer2")
                            .AllowColumnReordering(true)
                            .RowAlternationEnabled(true)
                            .AllowColumnResizing(true)
                            .ShowRowLines(true)
                            .ShowBorders(true)
                            .WordWrapEnabled(true)
                            .ColumnAutoWidth(true)
                            .ColumnResizingMode(ColumnResizingMode.Widget)
                            .SearchPanel(s => s
                            .Visible(true)
                            .HighlightCaseSensitive(true))
                            .Grouping(grouping => grouping.AutoExpandAll(true))
                            .GroupPanel(groupPanel => groupPanel.Visible(true))
                            .FilterPanel(f => f.Visible(true))
                            .HeaderFilter(h => h.Visible(true))
                            .Selection(s => s.Mode(SelectionMode.Multiple))
                            .RemoteOperations(true)
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                            .DataSource(ds => ds.Mvc()
                            .LoadParams(new { id = Model.DealID })
                            .Controller("APIResourcePlanningTemps")
                            .LoadAction("Get")
                            .InsertAction("Post")
                            .UpdateAction("Put")
                            .DeleteAction("Delete")
                            .Key("ResourcePlanningTempID")
                            )
                            .OnInitNewRow(@<text>
                                function(e) {
                                e.data.ProjectID = $('.ProjectID').val();
                                e.data.DealID = $('.DealID').val();
                                }
                            </text>)
                            .RemoteOperations(true)
                            .Columns(columns =>
                            {

                                columns.Add()
                                .Type(GridCommandColumnType.Buttons)
                                .Width(110)
                                .Buttons(b =>
                                {
                                    b.Add().Name(GridColumnButtonName.Edit);
                                    b.Add().Name(GridColumnButtonName.Delete);
                                });

                                columns.AddFor(m => m.PositionID).Lookup(x => x.
                                DataSource(d => d.WebApi().Controller("APIUsers").LoadAction("GetRoles").Key("PositionID"))
                                .DisplayExpr("Name")
                                .ValueExpr("RolesDataID")
                                );

                                columns.AddFor(m => m.SeniorityID).Lookup(lookup => lookup
                                .DataSource(ds => ds.WebApi().Controller("APIResourcePlanningTemps").LoadAction("SenioritiesLookup").Key("Value"))
                                .ValueExpr("Value")
                                .DisplayExpr("Text")
                                );

                                columns.AddFor(m => m.ResourceID).Lookup(x => x
                                .DataSource(d => d.WebApi().Controller("APIUsers").LoadAction("GetUsers").Key("ResourceID"))
                                .DisplayExpr("FirstNameAndLastNAme")
                                .ValueExpr("UserDataID")
                                );

                                columns.AddFor(m => m.PlannedHours);

                                columns.AddFor(m => m.Fee);

                                columns.AddFor(m => m.Cost);

                            })
                            .Editing(e => e
                            .AllowAdding(true)
                            .AllowUpdating(true)
                            .AllowDeleting(true)
                            .Mode(GridEditMode.Popup)
                            .UseIcons(true)
                            )
                            )
                    </div>

                    <br />

                    <div class="col-md-12 p-4">
                        <div class="form-group">
                            <div class="center">
                                @(Html.DevExtreme().Button()
                                    .ElementAttr("class", "validate")
                                    .Text("Guardar Linea base")
                                    .Type(ButtonType.Success)
                                    .UseSubmitBehavior(true)
                                    .OnClick("saveClick")
                                    )
                            </div>
                        </div>
                    </div>

                    <br />
                    <br />

                </div>
            }
        </form>
    </div>

</div>

<script>
    DevExpress.config({
        editorStylingMode: "filled"
    });

    function saveClick(e) {
        var result = e.validationGroup.validate();
        if (!result.isValid) {
            DevExpress.ui.notify("Debe diligenciar todos los campos obligatorios.", "error");
            e.cancel;
        }
    }

    function onProjectCostChange(e){
        console.log(e.value);
        console.log($("#projectValue").dxNumberBox("instance").option("value"));

        var valorProyecto = $("#projectValue").dxNumberBox("instance").option("value");
        var costoProyecto = e.value;

        var calculo = ((valorProyecto - costoProyecto)/valorProyecto)

        $("#grossMargin").dxNumberBox("instance").option("value", calculo);

    }

    function onProjectValueChange(e) {
        console.log(e.value);
        console.log($("#projectCost").dxNumberBox("instance").option("value"));

        var valorProyecto = e.value;
        var costoProyecto = $("#projectCost").dxNumberBox("instance").option("value");

        var calculo = ((valorProyecto - costoProyecto) / valorProyecto)
        var calculo = ((valorProyecto - costoProyecto) / valorProyecto)

        $("#grossMargin").dxNumberBox("instance").option("value", calculo);

    }
</script>