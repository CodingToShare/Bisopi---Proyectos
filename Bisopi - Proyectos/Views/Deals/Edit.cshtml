@model Bisopi___Proyectos.Models.Deal

<h4>Editar Deal</h4>
<hr />
<br />

<div class="row">
    <div class="col-12">
        <span class="float-right">
            <a class="btn btn-dark" href="/Deals/List">Volver</a>
        </span>
    </div>
    <div class="col-12">
        <form asp-controller="Deals" asp-action="Edit" method="post" enctype="multipart/form-data">
            @Html.HiddenFor(x => x.DealID, new { @class = "DealID" })
            @Html.HiddenFor(x => x.LeadID, new { @class = "LeadID" })
            @Html.HiddenFor(x => x.IsActive, new { @class = "IsActive" })
            @Html.HiddenFor(x => x.Created, new { @class = "Created" })
            @Html.HiddenFor(x => x.CreatedBy, new { @class = "CreatedBy" })
            @Html.HiddenFor(x => x.Modified, new { @class = "Modified" })
            @Html.HiddenFor(x => x.ModifiedBy, new { @class = "ModifiedBy" })

            @using (Html.DevExtreme().ValidationGroup())
            {
                <div class="row">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.DealName)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextBoxFor(x => x.DealName)
                                        .ID("dealName")
                                        .Placeholder("Escriba el nombre del Deal")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ClientID)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.ClientID)
                                        .DisplayExpr("ClientNameAndAbbreviation")
                                        .ValueExpr("ClientID")
                                        .ID("clientID")
                                        .DataSource(d => d.Mvc().Controller("APIClients").LoadAction("GetSelectBox").Key("ClientID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un cliente...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-7">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ResponsibleClient)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextBoxFor(x => x.ResponsibleClient)
                                        .ID("customerManager")
                                        .Placeholder("Escriba el responsable del cliente")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.AssignedPresaleID)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.AssignedPresaleID)
                                        .DataSource(d => d.Mvc().Controller("APIUsers").LoadAction("GetUsers").Key("AssignedPresaleID"))
                                        .DisplayExpr("FirstNameAndLastNAme")
                                        .ValueExpr("UserDataID")
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un usuario...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProposedDeliveryDate)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().DateBoxFor(x => x.ProposedDeliveryDate)
                                        .InputAttr("aria-label", "Date")
                                        .Type(DateBoxType.Date)
                                        .Value(DateTime.Now)
                                        .Placeholder("Seleccione la fecha de de entrega propuesta ...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Billable)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().CheckBoxFor(x => x.Billable)
                                        .ID("billable")
                                        .Value(true)
                                        .ElementAttr("aria-label", "Checked")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-fieldPlannedMilestones">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.PlannedMilestones)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.PlannedMilestones)
                                        .ID("PlannedMilestones")
                                        .Placeholder("Escriba el numero de hitos")
                                        .InputAttr("aria-label", "Currency Format")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProposalStatusID)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.ProposalStatusID)
                                        .DisplayExpr("ProposalStatusNameAndAbbreviation")
                                        .ValueExpr("ProposalStatusID")
                                        .ID("proposalStatusID")
                                        .DataSource(d => d.Mvc().Controller("APIProposalStatus").LoadAction("GetSelectBox").Key("ProposalStatusID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione un estado...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.CurrencyID)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().SelectBoxFor(x => x.CurrencyID)
                                        .DisplayExpr("CurrencyNameAndAbbreviation")
                                        .ValueExpr("CurrencyID")
                                        .ID("currencyID")
                                        .DataSource(d => d.Mvc().Controller("APICurrencies").LoadAction("GetSelectBox").Key("CurrencyID").Key("CurrencyID"))
                                        .SearchMode(DropDownSearchMode.Contains)
                                        .SearchEnabled(true)
                                        .MinSearchLength(3)
                                        .ShowDataBeforeSearch(true)
                                        .ShowDropDownButton(true)
                                        .DeferRendering(false)
                                        .Placeholder("Seleccione una moneda...")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.CommercialDiscount)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.CommercialDiscount)
                                        .ID("CommercialDiscount")
                                        .Format("$ #,##0.##")
                                        .InputAttr("aria-label", "Currency Format")
                                        .OnValueChanged("onCommercialDiscount")
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.TotalHours)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.TotalHours)
                                        .ID("TotalHours")
                                        .InputAttr("aria-label", "Currency Format")
                                        .Disabled(true)
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.LeadValue)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.LeadValue)
                                        .ID("leadValue")
                                        .Format("$ #,##0.##")
                                        .InputAttr("aria-label", "Currency Format")
                                        .OnValueChanged("onProjectValueChange")
                                        .Disabled(true)
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.ProjectCost)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.ProjectCost)
                                        .ID("projectCost")
                                        .Format("$ #,##0.##")
                                        .InputAttr("aria-label", "Currency Format")
                                        .OnValueChanged("onProjectCostChange")
                                        .Disabled(true)
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.GrossMargin)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().NumberBoxFor(x => x.GrossMargin)
                                        .ID("grossMargin")
                                        .Format("## %")
                                        .InputAttr("aria-label", "Currency Format")
                                        .Disabled(true)
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="dx-field">
                                <div class="dx-field-item-label-location-top">@Html.LabelFor(x => x.Comments)</div>
                                <div class="dx-field-item-content-location-bottom">
                                    @(Html.DevExtreme().TextAreaFor(x => x.Comments)
                                        .ID("justification")
                                        .Placeholder("Escriba los comentarios")
                                        .AutoResizeEnabled(true)
                                        )
                                </div>
                            </div>
                        </div>
                    </div>

                    <h5>Planificación Colaboradores</h5>

                    <div class="col-md-12">
                        @(Html.DevExtreme().DataGrid<Bisopi___Proyectos.ModelsTemps.ResourcePlanningTemp>()
                            .ID("gridContainer2")
                            .AllowColumnReordering(true)
                            .RowAlternationEnabled(true)
                            .AllowColumnResizing(true)
                            .ShowRowLines(true)
                            .ShowBorders(true)
                            .WordWrapEnabled(true)
                            .ColumnAutoWidth(true)
                            .ColumnResizingMode(ColumnResizingMode.Widget)
                            .SearchPanel(s => s
                            .Visible(true)
                            .HighlightCaseSensitive(true))
                            .Grouping(grouping => grouping.AutoExpandAll(true))
                            .GroupPanel(groupPanel => groupPanel.Visible(true))
                            .FilterPanel(f => f.Visible(true))
                            .HeaderFilter(h => h.Visible(true))
                            .Selection(s => s.Mode(SelectionMode.Multiple))
                            .RemoteOperations(true)
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                            .OnSaved("calculo")
                            .DataSource(ds => ds.Mvc()
                            .LoadParams(new { id = Model.DealID })
                            .Controller("APIResourcePlanningTemps")
                            .LoadAction("Get")
                            .InsertAction("Post")
                            .UpdateAction("Put")
                            .DeleteAction("Delete")
                            .Key("ResourcePlanningTempID")
                            )
                            .OnInitNewRow(@<text>
                                function(e) {
                                e.data.DealID = $('.DealID').val();
                                }
                            </text>)
                            .RemoteOperations(true)
                            .Columns(columns =>
                            {

                                columns.Add()
                                .Type(GridCommandColumnType.Buttons)
                                .Width(110)
                                .Buttons(b =>
                                {
                                    b.Add().Name(GridColumnButtonName.Edit);
                                    b.Add().Name(GridColumnButtonName.Delete);
                                });

                                columns.AddFor(m => m.PositionID).Lookup(x => x.
                                DataSource(d => d.WebApi().Controller("APIUsers").LoadAction("GetRoles").Key("PositionID"))
                                .DisplayExpr("Name")
                                .ValueExpr("RolesDataID")
                                );

                                columns.AddFor(m => m.SeniorityID).Lookup(lookup => lookup
                                .DataSource(ds => ds.WebApi().Controller("APIResourcePlanningTemps").LoadAction("SenioritiesLookup").Key("Value"))
                                .ValueExpr("Value")
                                .DisplayExpr("Text")
                                );

                                columns.AddFor(m => m.ResourceID).Lookup(x => x
                                .DataSource(d => d.WebApi().Controller("APIUsers").LoadAction("GetUsers").Key("ResourceID"))
                                .DisplayExpr("FirstNameAndLastNAme")
                                .ValueExpr("UserDataID")
                                );

                                columns.AddFor(m => m.PlannedHours);

                                columns.AddFor(m => m.Fee);

                                columns.AddFor(m => m.Cost);

                            })
                            .Editing(e => e
                            .AllowAdding(true)
                            .AllowUpdating(true)
                            .AllowDeleting(true)
                            .Mode(GridEditMode.Popup)
                            .UseIcons(true)
                            )
                            )
                    </div>

                    <h5>Hitos</h5>

                    <div class="col-md-12">
                        @(Html.DevExtreme().DataGrid<Bisopi___Proyectos.ModelsTemps.MilestoneTemp>()
                            .ID("gridContainer")
                            .AllowColumnReordering(true)
                            .RowAlternationEnabled(true)
                            .AllowColumnResizing(true)
                            .ShowRowLines(true)
                            .ShowBorders(true)
                            .WordWrapEnabled(true)
                            .ColumnAutoWidth(true)
                            .ColumnResizingMode(ColumnResizingMode.Widget)
                            .SearchPanel(s => s
                            .Visible(true)
                            .HighlightCaseSensitive(true))
                            .Grouping(grouping => grouping.AutoExpandAll(true))
                            .GroupPanel(groupPanel => groupPanel.Visible(true))
                            .FilterPanel(f => f.Visible(true))
                            .HeaderFilter(h => h.Visible(true))
                            .Selection(s => s.Mode(SelectionMode.Multiple))
                            .RemoteOperations(true)
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                            .DataSource(ds => ds.Mvc()
                            .LoadParams(new { id = Model.DealID })
                            .Controller("APIMilestoneTemps")
                            .LoadAction("Get")
                            .InsertAction("Post")
                            .UpdateAction("Put")
                            .DeleteAction("Delete")
                            .Key("MilestoneTempID")
                            )
                            .OnInitNewRow(@<text>
                                function(e) {
                                e.data.DealID = $('.DealID').val();
                                }
                            </text>)
                            .RemoteOperations(true)
                            .Columns(columns =>
                            {

                                columns.Add()
                                .Type(GridCommandColumnType.Buttons)
                                .Width(110)
                                .Buttons(b =>
                                {
                                    b.Add().Name(GridColumnButtonName.Edit);
                                    b.Add().Name(GridColumnButtonName.Delete);
                                });

                                columns.AddFor(m => m.MilestoneDate);

                                columns.AddFor(m => m.CurrencyID).Lookup(lookup => lookup
                                .DataSource(ds => ds.WebApi().Controller("APIMilestoneTemps").LoadAction("CurrenciesLookup").Key("Value"))
                                .ValueExpr("Value")
                                .DisplayExpr("Text")
                                );

                                columns.AddFor(m => m.Percentage);

                                columns.AddFor(m => m.Value).Format("$ #,##0.##");

                                columns.AddFor(m => m.MilestoneNumber);

                                columns.AddFor(m => m.IsItChangeControl);

                                columns.AddFor(m => m.Hours);

                                columns.AddFor(m => m.Comment);
                            })
                            .Editing(e => e
                            .AllowAdding(true)
                            .AllowUpdating(true)
                            .AllowDeleting(true)
                            .Mode(GridEditMode.Popup)
                            .UseIcons(true)
                            )
                            )
                    </div>

                    <br />

                    <div class="col-md-12 p-4">
                        <div class="form-group">
                            <div class="center">
                                @(Html.DevExtreme().Button()
                                    .ElementAttr("class", "validate")
                                    .Text("Guardar")
                                    .Type(ButtonType.Success)
                                    .UseSubmitBehavior(true)
                                    .OnClick("saveClick")
                                    )
                            </div>
                        </div>
                    </div>

                    <br />
                    <br />

                </div>
            }
        </form>
    </div>
</div>


<script>
    DevExpress.config({
        editorStylingMode: "filled"
    });

    function saveClick(e) {
        var result = e.validationGroup.validate();
        if (!result.isValid) {
            DevExpress.ui.notify("Debe diligenciar todos los campos obligatorios.", "error");
            e.cancel;
        }
    }

    function calculo(e) {
        var grid = $('#gridContainer2').dxDataGrid('instance');
        var rows = grid.getVisibleRows();
        var totalValue = 0;
        var totalCost = 0;
        var totalHours = 0;

        rows.forEach(function (row) {
            if (row.rowType === "data") {

                totalHours += row.data.PlannedHours;
                totalValue += row.data.Fee * row.data.PlannedHours;
                totalCost += row.data.Cost * row.data.PlannedHours;

            }
        });

        totalValue = totalValue - $("#CommercialDiscount").dxNumberBox("instance").option("value")

        $("#leadValue").dxNumberBox("instance").option("value", totalValue);
        $("#projectCost").dxNumberBox("instance").option("value", totalCost);
        $("#TotalHours").dxNumberBox("instance").option("value", totalHours);


    }

    function onProjectCostChange(e) {
        console.log(e.value);
        console.log($("#leadValue").dxNumberBox("instance").option("value"));

        var valorProyecto = $("#leadValue").dxNumberBox("instance").option("value");
        var costoProyecto = e.value;

        var calculo = ((valorProyecto - costoProyecto) / valorProyecto)

        $("#grossMargin").dxNumberBox("instance").option("value", calculo);

    }

    function onProjectValueChange(e) {
        console.log(e.value);
        console.log($("#projectCost").dxNumberBox("instance").option("value"));

        var valorProyecto = e.value;
        var costoProyecto = $("#projectCost").dxNumberBox("instance").option("value");

        var calculo = ((valorProyecto - costoProyecto) / valorProyecto)

        $("#grossMargin").dxNumberBox("instance").option("value", calculo);

    }

    function onCommercialDiscount(e) {

        var calculo = $("#leadValue").dxNumberBox("instance").option("value") - e.value;

        $("#leadValue").dxNumberBox("instance").option("value", calculo);

    }
</script>