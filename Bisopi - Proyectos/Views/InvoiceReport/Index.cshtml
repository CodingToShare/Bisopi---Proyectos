
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.10.1/polyfill.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>


<h4>Reporte Facturación</h4>
<hr />
<br />

@(Html.DevExtreme().DataGrid<Bisopi___Proyectos.Models.InvoiceReport>()
    .ID("gridContainer")
    .AllowColumnReordering(true)
    .RowAlternationEnabled(true)
    .AllowColumnResizing(true)
    .ShowRowLines(true)
    .ShowBorders(true)
    .WordWrapEnabled(true)
    .ColumnAutoWidth(true)
    .ColumnResizingMode(ColumnResizingMode.Widget)
    .SearchPanel(s => s
    .Visible(true)
    .HighlightCaseSensitive(true))
    .Grouping(grouping => grouping.AutoExpandAll(true))
    .GroupPanel(groupPanel => groupPanel.Visible(true))
    .FilterPanel(f => f.Visible(true))
    .HeaderFilter(h => h.Visible(true))
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .OnExporting("exporting")
    .RemoteOperations(true)
    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
    .DataSource(ds => ds.Mvc()
        .Controller("APIInvoiceReports")
        .LoadAction("Get")
        .Key("InvoiceReportID")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.Add().Width(50).CellTemplate(@<text> <a href="/Project/Milestone/<%- data.ProjectID %>" data-toggle="tooltip"><img src="~/img/hito.png" /></a>   </text>);

        columns.AddFor(m => m.ProjectName);

        columns.AddFor(m => m.CountryID).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("APIInvoiceReports").LoadAction("CountriesLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.ClientID).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("APIInvoiceReports").LoadAction("ClientsLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.ProjectStatusID).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("APIInvoiceReports").LoadAction("ProjectsStatusLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.IsItChangeControl);

        columns.AddFor(m => m.MilestoneNumber);

        columns.AddFor(m => m.MilestoneDate);

        columns.AddFor(m => m.StatusBill).Lookup(l => l.DataSource(Html.GetEnumSelectList<Bisopi___Proyectos.Enums.StatusBill>()
                        .Select(i => new { Value = int.Parse(i.Value), Text = i.Text })
                        )
                        .ValueExpr("Value")
                        .DisplayExpr("Text"));

        columns.AddFor(m => m.CurrencyID).Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("APIInvoiceReports").LoadAction("CurrenciesLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );

        columns.AddFor(m => m.Value).Format("$ #,##0.##");

        columns.AddFor(m => m.TRM).Format("$ #,##0.##");

        columns.AddFor(m => m.SubTotalBillCOP).Format("$ #,##0.##");

        columns.AddFor(m => m.RetentionValueCOP).Format("$ #,##0.##");

        columns.AddFor(m => m.ValueAddedTax).Format("$ #,##0.##");

        columns.AddFor(m => m.ValueAddedTaxWuthholding).Format("$ #,##0.##");

        columns.AddFor(m => m.TotalBillCOP).Format("$ #,##0.##");

        columns.AddFor(m => m.BillingApprovedDate);

        columns.AddFor(m => m.BilledDate);

        columns.AddFor(m => m.DatePaid);

    })
)

<script>
    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('ListaProyectos');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Proyectos.xlsx');
            });
        });
        e.cancel = true;
    }
</script>
